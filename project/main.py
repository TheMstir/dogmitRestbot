import datetime

import telebot
import random
import time
from weather import get_weather_box
import config
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from telebot import types
from telebot import custom_filters
from hotels_hostels import get_hotels_box
import Homeland_rus
from history_controller import history_file
import requests
import urllib
from telebot.types import InputMediaPhoto
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP

# @DogmeetRestbot
cash_storage = StateMemoryStorage()

bot = telebot.TeleBot(config.token, state_storage=cash_storage)


class MyStates(StatesGroup):
    """–•—Ä–∞–Ω–ª–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    flag = State()  # –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    city = State()  # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–∏—Å–∫–∞
    count_place = State()  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö –æ—Ç–µ–ª–µ–π
    count_photos = State()  # None/5(max)
    come_in = State()
    come_out = State()



@bot.message_handler(regexp='–ü—Ä–∏–≤–µ—Ç')
@bot.message_handler(commands=['hello-world'])
def hello_start(message: types.Message):
    """
    –ë–æ—Ç –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–≤–µ—Ç—Å–≤–∏–µ
    """
    dice = random.randint(0, 4)
    mes = ''
    if dice == 0:
        mes = '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'
    elif dice == 1:
        mes = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∏—Å–∫–∞—Ç–µ–ª—å –≥–æ—Å—Ç–∏–Ω–∏—Ü! üëã'
    elif dice == 2:
        mes = '–ü—Ä–∏–≤–µ—Ç! üëã –£ –Ω–∞—Å –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥—ã /start'
    elif dice == 3:
        mes = '–≠—Ç–æ –ª–∏—à—å —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è, —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å–µ–º—É –Ω–∞—É—á—É—Å—å –∏ –ø–æ–º–æ–≥—É –≤–∞–º, –Ω–æ –ø–æ–∑–∂–µ'
    elif dice == 4:
        mes = facts()

    bot.send_message(message.chat.id, mes, parse_mode='HTML')


@bot.message_handler(commands=['start'])
def send_welcome(message: types.Message):
    rand_m = random.randint(1, 2)
    if rand_m == 1:
        mess = f'Bau-Wau <b>{message.from_user.first_name}</b> —è –±–æ—Ç-–ü–µ—Å–º–∏—Ç!\n' \
               f'–ü–æ–∏—Å–∫–æ–≤—ã–π –ø–µ—Å (‚óï·¥•‚óï ã) –∫–æ–º–ø–∞–Ω–∏–∏ "Too Easy Travel"!\n' \
               f'–ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å –≤ —Ç–≤–æ–∏—Ö –ø–æ–∏—Å–∫–∞—Ö! '
    else:
        mess = f'–ü—Ä–∏–≤–µ—Ç! <b>{message.from_user.first_name}</b> —è –ø–æ–∏—Å–∫–æ–≤–∞—è —Å–æ–±–∞—á–∫–∞ üêï –∫–æ–º–ø–∞–Ω–∏–∏ "Too Easy Travel"!, ' \
               f'–Ø –∑–¥–µ—Å—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–∞–º—É—é –ª—É—á—à—É—é –≥–æ—Å—Ç–∏–Ω–∏—Ü—É –¥–ª—è –æ—Ç–¥—ã—Ö–∞!'
    bot.send_message(message.chat.id, mess, parse_mode='HTML')
    time.sleep(1)
    bot.send_message(message.chat.id, f'–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å? –ñ–º–∏ /help,\n'
                                      f'–í–∫–ª—é—á–∏—Ç—å –±—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é? /fast_menu\n'
                                      f'–ï—Å–ª–∏ –≤—Å–µ –∑–Ω–∞–µ—à—å —Ç–æ –¥–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å\n')
    fact = facts()
    bot.send_message(message.chat.id, fact)


@bot.message_handler(commands=['fast_menu'])
def menu(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üëã –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫", "‚ùì Help/Menu")
    bot.send_message(message.from_user.id, 'ok', reply_markup=markup)


@bot.message_handler(commands=['help'])
def show_help_menu(message: types.Message):
    """
    –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–º–æ—â–∏
    –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É
    –∏–Ω–æ–≥–¥–∞ –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    """
    mess = '''–ì–∞–≤! üê∂ –í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:
/start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ
/low_price —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ —Ü–µ–Ω–µ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã ‚õ∫üèöÔ∏è
/high_price —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—ã–µ –∫—Ä—É—Ç—ã–µ –∏ –¥–æ—Ä–æ–≥–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –∂–∏–∑–Ω–∏ üíéüèõÔ∏è
/best_deal —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Ç–µ—Ö –º–µ—Å—Ç–∞—Ö –∫—É–¥–∞ –≤—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å üíºüí∞
/homeland_rus —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã –≤ –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏ /–¥–ª—è –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–æ–≤, —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫/
/weather —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–≥–æ–¥–æ–π –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—à–∏—Ç—å—Å—è –Ω–∞ –≤—ã–±–æ—Ä –ø–æ–±–ª–∏–∂–µ –∫ –ø–ª—è–∂—ÉüåÖ
/history –ë–£–î–ï–¢ –°–ü–û–°–û–ë–ù–û –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
/cancel ‚ùå –æ—Ç–º–µ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ ‚ôªÔ∏è
–ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è, –Ω–æ –ø–æ–º–Ω–∏ —á—Ç–æ —è –≤—Å–µ–≥–æ-–ª–∏—à—å —Ü–∏—Ñ—Ä–æ–≤–æ–π üêï‚Äçü¶∫ –±–æ—Ç-–ø–µ—Å–∏–∫ –∏ —É–º–µ—é –Ω–µ —Ç–∞–∫ —É–∂ –∏ –º–Ω–æ–≥–æ
    '''
    bot.send_message(message.chat.id, mess, parse_mode='HTML')
    dice = random.randint(1, 6)
    if dice == 6:
        time.sleep(0.5)
        bot.send_message(message.chat.id, facts())


@bot.message_handler(commands=['homeland_rus'])
def homelandrus(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–≥–∏–æ–Ω–µ
    –≥–¥–µ –Ω–µ—Ç gaiaId, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–∞—á–µ–π
    """
    bot.send_message(message.chat.id, '–ü–æ–∏—â–µ–º –º–µ—Å—Ç–Ω—ã–µ –æ—Ç–µ–ª–∏:  Ô∏èüàÇÔ∏è')
    time.sleep(1)
    sent = bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?: ')
    bot.register_next_step_handler(sent, homeland)


@bot.message_handler(commands=['low_price'])
def low_price(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π —Å —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–æ–π
    –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞ –ø–æ 'PRICE_LOW_TO_HIGH'
    –≤–µ–¥–µ—Ç –∫ —Ü–µ–ø–æ—á–∫–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    bot.send_message(message.chat.id, '–ü–æ–∏—â–µ–º –¥–µ—à–µ–≤—ã–µ –æ—Ç–µ–ª–∏:  Ô∏èüàÇÔ∏è')
    bot.set_state(message.from_user.id, MyStates.flag, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['flag'] = 'PRICE_LOW_TO_HIGH'
    time.sleep(1)
    bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?: ')

    bot.set_state(message.from_user.id, MyStates.city, message.chat.id)


@bot.message_handler(commands=['high_price'])
def high_price(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π —Å —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–æ–π.
    –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ 200 –¥–æ–ª–ª–∞—Ä–∞–º–∏, –Ω–æ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
    –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
    –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞ 'PRICE_HIGHEST_FIRST'
    –≤–µ–¥–µ—Ç –∫ —Ü–µ–ø–æ—á–∫–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    bot.send_message(message.chat.id, '–ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: üí∏Ô∏èüßê')

    bot.set_state(message.from_user.id, MyStates.flag, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['flag'] = 'PRICE_HIGHEST_FIRST'
    time.sleep(0.2)
    bot.send_message(message.chat.id, '–ë—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—èüêï! –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—â–µ–º?: ')

    bot.set_state(message.from_user.id, MyStates.city, message.chat.id)


@bot.message_handler(commands=['best_deal'])
def best_price(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π —Å —Å–∞–º—ã–º –ª—É—á—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    —Å—É–¥—è –ø–æ –≤—Å–µ–º—É —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∏–¥–æ–∫ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–ª–∞–≥–∏ 'STANCE_FROM_LANDMARK', 'BEST_SELLER'
    –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç –Ω–µ–µ –∏ –∏–¥–µ—Ç —Å–±–æ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    bot.send_message(message.chat.id, '–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É –≤ –ø–æ–∏—Å–∫–µ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Ç–æ–≤–∞—Ä–∏—â!ü¶Æ:  Ô∏èüâê')

    bot.set_state(message.from_user.id, MyStates.flag, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['flag'] = 'STANCE_FROM_LANDMARK', 'BEST_SELLER'
    time.sleep(1)
    bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Å–æ–±–∏—Ä–∞–µ–º—Å—è –∑–∞–Ω–æ—á–µ–≤–∞—Ç—å?üèñÔ∏è: ')

    bot.set_state(message.from_user.id, MyStates.city, message.chat.id)


@bot.message_handler(state=MyStates.city)
def get_city_seartch(message: types.Message):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
    –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['city'] = message.text
    bot.send_message(message.chat.id, '–ö–ª–∞—Å—Å–Ω—ã–π –≥–æ—Ä–æ–¥!ü¶Æ –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º...')
    date_start(message)

@bot.message_handler(state=MyStates.come_in)  # –≤—ã–∑–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def date_start(message: types.Message):
    """
    –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    """
    calendar, step = DetailedTelegramCalendar(calendar_id=0,
                                              min_date=datetime.date.today(),
                                              locale='ru').build()
    bot.send_message(message.chat.id, '–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–µ–∑–∂–∞—Ç—å?', reply_markup=calendar)


def date_out(message: types.Message):
    """
    –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞
    """
    chat_id = message.chat.id
    user_id = message.chat.id

    with bot.retrieve_data(user_id, chat_id) as data:
        date_in = data.get('come_in', datetime.date.today)

    calendar, step = DetailedTelegramCalendar(calendar_id=1,
                                              min_date=date_in + datetime.timedelta(days=1),
                                              locale='ru').build()
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –ê –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≤—ã–µ–∑–∂–∞—Ç—å', reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=0))
def date_in_calendar(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    user_id = callback_query.message.chat.id

    result, key, step = DetailedTelegramCalendar(calendar_id=0,
                                                 min_date=datetime.date.today(),
                                                 locale='ru').process(callback_query.data)
    if not result and key:
        bot.edit_message_text('–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–µ–∑–∂–∞—Ç—å?',
                              chat_id,
                              callback_query.message.message_id,
                              reply_markup=key)
    elif result:
        with bot.retrieve_data(user_id, chat_id) as state_data:
            state_data['come_in'] = result

        bot.edit_message_text(f'–î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ {result}',
                              chat_id,
                              callback_query.message.message_id)
        date_out(callback_query.message)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=1))
def date_out_calendar(callback_query: types.CallbackQuery):
    """
    –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤—ã –±—ã—Å—Ç—Ä–æ–º –º–µ–Ω—é
    –ø–æ—Å–ª–µ —á–µ–≥–æ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –∏ –≤—ã–µ–∑–¥–∞ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    """
    chat_id = callback_query.message.chat.id
    user_id = callback_query.message.chat.id
    with bot.retrieve_data(user_id, chat_id) as data:
        date_in = data.get('come_in', datetime.date.today)

    result, key, step = DetailedTelegramCalendar(calendar_id=1,
                                                 min_date=date_in + datetime.timedelta(days=1),
                                                 locale='ru').process(callback_query.data)
    if not result and key:
        bot.edit_message_text('–û—Ç–ª–∏—á–Ω–æ! –ê –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≤—ã–µ–∑–∂–∞—Ç—å',
                              chat_id,
                              callback_query.message.message_id,
                              reply_markup=key)
    elif result:
        with bot.retrieve_data(user_id, chat_id) as data:
            data['come_out'] = result

        bot.edit_message_text(f'–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ {result}',
                              chat_id,
                              callback_query.message.message_id)

        bot.set_state(user_id, MyStates.count_place, chat_id)
        bot.send_message(chat_id, '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—èüå≠üê∂! –°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–∏–Ω–∏—Ü —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')


@bot.message_handler(state=MyStates.count_place, is_digit=True)
def get_count_place(message: types.Message) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞
    –ø–æ–∫–∞ –æ–≥—Ä–∞–Ω–∏—á—É 5 –∫–∞–∫ –º–∞–∫—Å–∏–º—É–º.
    """

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['count_place'] = message.text

    if data['count_place'].isdigit():
        data['count_place'] = int(data['count_place'])
        if data['count_place'] > 5:
            bot.send_message(message.chat.id, '–Ø –¥—É–º–∞—é 5 –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, üêæ –ª–∞–ø–∫–∏ –∫–æ—Ä–æ—Ç–∫–æ–≤–∞—Ç—ã, —è –∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π –ø–µ—Å')
            data['count_place'] = 5
        markup_inline = types.InlineKeyboardMarkup()
        item_yes = types.InlineKeyboardButton(text='üëã –î–ê', callback_data='yes')
        item_no = types.InlineKeyboardButton(text='üö´ –ù–ï–¢', callback_data='no')

        markup_inline.add(item_yes, item_no)
        bot.send_message(message.chat.id, f'–ì–∞–≤! –û—Ç–ª–∏—á–Ω–æ {message.from_user.first_name}! '
                                          f'–ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?', reply_markup=markup_inline)

    else:
        bot.register_next_step_handler(message, incorrect)


@bot.callback_query_handler(func=lambda call: True)
def photos_yn(call: types.CallbackQuery) -> None:
    """
    –û–ø—Ä–∞—à–∏–≤–∞—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ —É—Ç–æ—á–Ω—è—é—Ç –Ω—É–∂–Ω—ã –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª–µ–π
    –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é —Å–¥–≤–∏–Ω—É—Ç—å –æ—Ç–≤–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –æ–¥–Ω–∞–∫–æ –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –≤ —ç—Ç–æ–º –Ω–µ—Ç
    –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """
    if call.data == 'yes':
        send = bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ U„Éª·¥•„ÉªU! —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, —è —Å–±–µ–≥–∞—é –∑–∞ –Ω–∏–º–∏!')
        bot.register_next_step_handler(send, photos_get)

    elif call.data == 'no':
        # –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç –Ω–æ–ª—å
        sent = bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ!üêæ —Å–µ–π—á–∞—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é —Å—Å—ã–ª–∫–∏')
        time.sleep(1)
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['count_photos'] = 0
        bot.register_next_step_handler(sent, ready)
        bot.send_message(call.message.chat.id, '–Ø üê∂–ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª! –í—ã—Å—ã–ª–∞—Ç—å? ü¶ä /go')

    else:
        incorrect()


@bot.message_handler(state=MyStates.count_photos, is_digit=True)
def photos_get(message: types.Message) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    –∏ –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å–ø–∏—Å–∫–∞ –∏ –≤—ã–Ω–∏–º–∞—é—Ç—Å—è –∏–∑ –Ω–µ–≥–æ –≤ –≤–∏–¥–µ –¥–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['count_photos'] = message.text
    if data['count_photos'].isdigit():
        if int(data['count_photos']) > 7:
            bot.send_message(message.chat.id, '–ú–Ω–æ–≥–æ, —è –º–∞–ª–µ–Ω—å–∫–∏–π, –º–∞–∫—Å–∏–º—É–º 7 —à—Ç—É–∫ –ø—Ä–∏–Ω–µ—Å—É')
            data['count_photos'] = 4
        elif int(data['count_photos']) == 1:
            bot.send_message(message.chat.id, '–ú–∞–ª–æ–≤–∞—Ç–æ, –¥–∞–≤–∞–π 2')
            data['count_photos'] = 2
        data['count_photos'] = int(data['count_photos'])
        sent = bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! —Å–µ–π—á–∞—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é —Å—Å—ã–ª–∫–∏')
        time.sleep(0.5)
        bot.send_message(message.chat.id, 'üê∂–ì–∞–≤—Ç–æ–≤—ã!ü¶ä –í—ã—Å—ã–ª–∞—Ç—å? /go')
        bot.register_next_step_handler(sent, ready)

    else:
        bot.register_next_step_handler(message, incorrect)


def ready(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞—é—â–∞—è —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è –∑–∞–ø–∞—Ä–æ—Å –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π
    —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫ 2—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤—ã–¥–∞–µ—Ç
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–≤—É—Ö –≤–∏–¥–æ–≤.

    """
    datas = cash_storage.get_data(message.from_user.id, message.chat.id)
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–µ–π—á–∞—Å –≤—ã–¥–∞–º.‚è±')

    mess = get_hotels_box(datas['city'], datas['count_place'], datas['count_photos'], datas['flag'], datas['come_in'],
                          datas['come_out'])

    name_id = f'{message.from_user.first_name}_{message.from_user.last_name}'
    history_file(name_id, datas['city'], datas['count_place'], datas['flag'], mess)

    try:
        if datas['count_photos'] > 0:
            # –¥–æ–∫–∏–¥—ã–≤–∞—é —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.send_message(message.chat.id, mess[0], parse_mode='HTML')

            for el in mess[1:]:
                el[0] = str(el[0])
                media_group = [types.InputTextMessageContent(el[0])]
                for elo in el[1]:
                    media_group.append(types.InputMediaPhoto(elo, el[0]))
                bot.send_media_group(chat_id=message.chat.id, media=media_group)

        else:
            for el in mess:
                bot.send_message(message.chat.id, *el, parse_mode='HTML')

    except:
        bot.send_message(message.chat.id, '–ì–ê–í!üê¶üìõ –°–µ–π—á–∞—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç, –≤—Å–µ –ª–∞–ø–∫–∏ —Å—Ç–µ—Ä –∏ –Ω–µ –Ω–∞—à–µ–ª',
                         parse_mode='HTML')

    weather = get_weather_box(datas['city'])  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤
    # –≥–æ—Ä–æ–¥–µ –≥–¥–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫
    bot.send_message(message.chat.id, weather, parse_mode='HTML')
    # –∏ —É–¥–∞–ª—è–µ–º –º—É—Å–æ—Ä –¥–∏—á—å
    bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(state="*", commands=['cancel'])
def any_state(message: types.Message) -> None:
    """
    –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –≤ States –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data = cash_storage.get_data(message.from_user.id, message.chat.id)
    data['city'] = ''
    data['count_place'] = 0
    data['count_photos'] = 0
    data['come_in'] = None
    data['come_out'] = None

    bot.send_message(message.chat.id, "–í–∞—à–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    bot.delete_state(message.from_user.id, message.chat.id)
    show_help_menu(message)


def homeland(message: types.Message) -> None:
    bot.set_state(message.from_user.id, '')
    city = message.text
    bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ!ü¶Æ —Å–±–µ–≥–∞—é –∏ –ø–æ—Å–º–æ—Ç—Ä—é —á—Ç–æ —Ç–∞–º –µ—Å—Ç—å')
    mess = Homeland_rus.get_hotels(city)
    name_id = f'{message.from_user.first_name}_{message.from_user.last_name}'
    history_file(name_id, city, 0, '–º–µ—Å—Ç–Ω—ã–µ', mess)
    for el in mess:
        bot.send_message(message.chat.id, el, parse_mode='HTML')

    weather = get_weather_box(city)
    bot.send_message(message.chat.id, weather, parse_mode='HTML')


@bot.message_handler(state=MyStates.count_place or MyStates.count_photos, is_digit=False)  # –Ω–µ–≤–µ—Ä–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –≤–≤–æ–¥
def incorrect(message: types.Message) -> None:
    """
    –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∏–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ—Ç –∫ —Å—Ç–∞—Ä—Ç—É
    """
    bot.send_message(message.chat.id, '–ì–∞–≤, –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫, –±—É–¥—Ç–æ —Ç—ã –≤–≤–æ–¥–∏—à—å —á–∏—Å–ª–∞ –±—É–∫–≤–∞–º–∏... –Ø –Ω–µ –∑–Ω–∞—é, '
                                      '–ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –∏–ª–∏ –ª—É—á—à–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞\n/help, /start')
    send_welcome(message)


@bot.message_handler(commands=['history'])
def histors(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    –∑–∞—Ç–µ–º –≤—ã—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∞–∏–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    name_id = f'{message.from_user.first_name}_{message.from_user.last_name}'

    try:
        with open(f'historys/{name_id}.txt', 'r', encoding='utf-8') as r:
            for i in range(15):
                fp = r.readline()
                fp = fp.partition('üè¨')[0]
                fp = fp.replace('\\n', ' ').replace('[', '').replace("'", '')
                bot.send_message(message.from_user.id, fp, parse_mode='HTML')
            r.close()

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π. –í–µ—Ä—Å—Ç–∫–∞ —Ç–∞–º html –Ω–æ –∫–∞–∫ –ª–æ–≥ –ø–æ–¥–æ–π–¥–µ—Ç
        with open(f'historys/{name_id}.txt', 'r', encoding='utf-8') as r:
            bot.send_document(message.chat.id, r)

    except:
        bot.send_message(message.from_user.id, '–í—É—É—Ñ... –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏...')


@bot.message_handler(commands=['weather'])
def get_weather(message: types.Message) -> None:
    """
    –ù–µ–±–æ–ª—å—à–∞—è –æ—Ç—Å–µ–±—è—Ç–∏–Ω–∞ –≤—ã–≤–æ–¥—è—â–∞—è –ø–æ–≥–æ–¥—É, —Ç–∞–∫ –∂–µ –ø–æ
     –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫ –ø–æ–∏—Å–∫—É –≥–æ—Å—Ç–∏–Ω–∏—Ü
    """
    sent = bot.send_message(message.chat.id, 'üåÜüß≥–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥: ', parse_mode='HTML')  #
    bot.register_next_step_handler(sent, weather_date)


def weather_date(message: types.Message) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≥–æ–¥—É –≤ –∫–∞–∫–æ–º-—Ç–æ –≥–æ—Ä–æ–¥–µ
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –±–æ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    city = message.text
    mess = get_weather_box(city)
    bot.send_message(message.chat.id, mess, parse_mode='HTML')


@bot.message_handler(content_types=['text'])
def date_from_user(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    :return:
    """
    if message.text == 'üëã –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫':
        best_price(message)
    if message.text == '‚ùì Help/Menu':
        show_help_menu(message)


def facts() -> str:
    """
    –ë–µ—Ä–µ—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ.
    :return: —Å—Ç—Ä–æ—á–∫—É —Å —Ñ–∞–∫—Ç–æ–º
    """
    with open('facts.txt', 'r', encoding='utf-8') as f:
        mess = f.read().split('\n')
        dice = random.randint(1, 10)
        fact = mess[dice]
    return fact


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.add_custom_filter(custom_filters.IsDigitFilter())

bot.infinity_polling(skip_pending=True)
